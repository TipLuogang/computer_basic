1. 文件管理概述
    文件就是一组有意义的信息/数据集合
    计算机中有各种各样的文件，一个文件有
        1.哪些属性 
            文件名，标识符(唯一)，类型(.txt，.mp4文件), 位置(存放路径，在外存中的地址)
            大小，创建、上次修改时间，文件所有者信息，保护信息
        2.文件内部数据怎样组织 
            txt：无结构文件，由一些二进制或字符流组成，又称：流式文件
            excel,数据库表：有结构文件，由一组相似的记录组成，又称：记录式文件
                记录之间应该如何组织？顺序存放？用索引表来表示记录间的顺序？这是 文件的逻辑结构 重点探讨的问题
        3.文件之间怎样组织
            Windows：树状结构
                根目录（如C、D、E盘）下可以有目录和文件，目录下面可以有更深一层的目录和文件
                目录其实也是一种特殊的有结构文件（由记录组成）
        4.OS应该提供哪些功能给用户、应用程序
            创建文件，打开文件，读文件，写文件，删除文件，关闭文件
        5.文件数据应该怎么存放在磁盘上
            与内存一样，外存也是由一个个存储单元组成，每个存储单元可以存储一定量的数据（如1B），每个存储单元对应一个物理地址
            内存会被分为一个一个的内存块，外存也会被分为一个个磁盘块/物理块，每个磁盘块的大小相等，一般包含2的整数次幂个地址，
                比如某个块包含0~1023的地址。
            文件的逻辑地址也可以（逻辑块号，块内地址），OS需要将文件的逻辑地址转换为外存的物理地址（物理块号，块内地址）的形式
                块内地址的位数取决于磁盘块的大小，比如块大小为2^10，即1KB，则块内地址需要10位
            OS以块位单位为文件分配存储空间，因此一个文件为10B也需要占用1KB的磁盘块，外存中数据的读取也是以块为单位
                a.文件数据放在连续的几个磁盘块中
                b.文件数据放在离散的几个磁盘块中，此时应该如何记录各个磁盘块之间的先后顺序？
                c.OS如何管理空闲的磁盘块，如何进行磁盘块的分配与回收？（存储空间的管理）
                文件的物理结构 部分会探讨的内容

2.文件的逻辑结构
    无结构文件：流式文件，一系列字符流  
    有结构文件：记录式文件，一组相似的记录，根据各条记录的长度可分为：定长记录和可变长记录
        顺序文件
            文件中的记录一个接一个地顺序排列（逻辑上），记录是可以定长和可变长的。各个记录在物理上可以顺序存储或链式存储
            顺序存储：逻辑上相邻的记录物理上也相邻（类似顺序表）
            链式存储：逻辑上相邻的记录物理上不一定相邻（类似链表）
            根据记录是否按照关键字的排列又可以分为串结构（记录之间顺序与关键字无关）和顺序结构（记录之间顺序按关键字顺序排列）
        索引文件
            可变长记录文件快速找到第i个记录
            每个文件建立一个索引表，每个表项对应文件的一条记录，文件的记录在物理上不需要连续地存放，索引表的各个表项在物理上需要连续存放
            每个表项大小相等，因此索引表本身是定长记录的顺序文件
            可以将关键字作为索引号内容，并且让索引表按关键字顺序排列，则可以将索引文件支持折半查找
            可以用不同的数据项为一个文件建立多个索引表
        索引顺序文件
            索引文件可能很大，存储空间利用率太低
            索引顺序文件也会为文件建立索引表，不同的是：并不是每个记录对应一个索引项，而是一组记录对应一个索引项
            索引顺序文件的索引项不需要按关键字排列，方便了新表项的插入
            多级索引顺序文件：解决记录数太多情景
                低级索引表：每个索引表有100个表项，每个表项对应一个分组，每个分组中有100个记录
                100张低级索引表：100*100*100=10^6条记录
                为这100张低级索引表建立一张顶级索引表：有100个表项，每个表项对应一张低级索引表
3.文件目录
    文件控制块
        根目录的目录文件
            文件名  类型    存取权限    ...  物理位置
            照片    目录    读写            外存643号块
        每条记录对应一个文件（目录也是一种特殊的文件），一条记录就是一个文件控制块FCB，一个目录项
        需要对目录进行哪些操作：
            搜索：按文件名搜索，找到对应的目录项；创建文件：在所属目录中增加一个目录项；
            删除文件：删除目录项；显示目录：显示目录中的所有文件及相应属性；修改：文件重命名
        由文件控制块的有序集合就组成了文件的目录
    目录的结构：
        两级目录结构：主文件目录（MFD），用户文件目录（UFD）
        多级目录结构（树形目录结构）：用文件路径名标识文件，各级目录之间用“/”隔开，比如：/照片/12-18/xxx.jpg
            绝对路径：系统根据绝对路径一层一层的找到下一级目录，首先从外存读入根目录的目录表，找到“照片”目录存放的位置后，
                从外存读入对应的目录表；再找到“12-18”目录存放的位置，再从外存读入对应的目录表；最后才找到“xxx.jpg”的存放位置，
                整个过程需要3次读磁盘I/O操作；
            相对路径：从当前目录访问文件，当前目录是“照片”，则相对路径为：./12-18/xxx.jpg, 从当前目录出发，找到“12-18”在外存
                的存放位置并调入该目录，即可知道“xxx.jpg”存放的位置
                整个过程需要1次读磁盘I/O操作；提升了访问文件的效率
            树形结构不便于实现文件共享，提出了 无环图目录结构
        无环图目录结构：在树形结构的基础上增加了指向同一个节点的有向边，使得整个目录称成为一个有向无环图
            删除问题：为每个共享节点设置一个共享计数器，表示此时有多少个地方在共享该结点，用户删除时，只删除该用户的FCB，
                并使共享计数器减一，只有共享计数器为0的时候，才把该文件真正删除
    索引节点（对文件控制块的优化）
        查找的时候只关心文件名和物理位置，其他属性不需要关心，可以对目录表优化
        把其他信息（包括物理位置）放到另外的地方：索引结点
            文件名  索引结点指针
        目录项长度减小，每个磁盘块可以存放更多个目录项，因此检索文件时磁盘I/O的次数就少了很多
        在外存中的索引结点称为“磁盘索引结点”，放入内存后称为“内存索引结点”
        内存索引结点有更多的信息：文件是否被修改，此时有几个进程正在访问该文件等
4.文件的物理结构（文件分配方式）
    OS需要对磁盘块进行管理：
        对非空闲磁盘块管理（存放了文件数据的磁盘块）：文件的物理结构，文件分配方式 要探讨的问题
        对空闲磁盘块的管理：文件存储空间管理 要探讨的问题

    文件的物理结构：文件数据应该怎样存放在外存中？
        连续分配
        链接分配
            隐式链接
            显示链接
        索引分配

    类似内存分页，磁盘中的存储单元被分为一个个“块/磁盘块/物理块”，在很多OS中，磁盘块的大小与内存块、页面的大小相同(内存与磁盘之间的
    ，数据交换都是以块为单位进行的，即每次读入一块，每次写出一块)
    系统对这些块进行编号，比如：0号块(物理地址0~1023)，1号块(物理地址1024~2047)...

    在内存管理中，进程的逻辑地址空间被划分为一个一个的页面，同样的，
    在外存管理中，文件的逻辑地址空间被划分为一个一个的文件“块”
    因此文件的逻辑地址也可以表示为（逻辑块号，块内地址）的形式

    如果块的大小是1KB，则1MB大小的文件可以被分为1K个块，则这个文件的逻辑块号从0到1023，总共1K个块号
    文件的数据被分为一个一个的逻辑块，OS为文件分配存储空间都是以块为单位的,比如：逻辑块号0的块放到了物理块号4的磁盘块中，逻辑块号1的块放到了物理块号9的磁盘块中...
    用户对于自己的文件的这些逻辑块到底对应哪些个物理块是不可知的，用户在操作自己的文件的时候使用的是（逻辑地址：逻辑块号，块内地址）的形式
    OS负责实现从逻辑地址到物理地址的映射

    连续分配：要求每个文件在磁盘上占有一组连续的块：文件“aaa”有逻辑块0，1，2，对应物理块4，5，6
        （逻辑块号，块内地址）--》（物理块号，块内地址），只需转换块号即可
        在文件的目录表中，记录存放着起始块号和长度（总共占用几个块）
            文件名  ... 起始块号    长度
            aaa         4          3
            bbb         10         4
        用户给出了要访问的逻辑块号，OS找到该文件对应的目录项（FCB），物理块号=起始块号+逻辑块号，OS会检查逻辑块号是否合法
        因此，只要用户给出了要访问的逻辑块号，OS就可以直接根据逻辑块号，算出对应的物理块号
        优点1：因此连续分配方式支持顺序访问和直接访问（即随机访问）
        优点2：读取某个磁盘块时，需要移动磁头，访问两个磁盘块越远，移动磁头所需时间就越长，
            结论：连续分配的文件在顺序读写时速度最快
        缺点1：文件a占用3个连续的块，如果文件a后面的块已经分配给其他文件，则当文件a需要扩展时（增加一个磁盘块）,需把文件a的数据整体迁移
        到另外的有连续的4个块的区域中，进行数据迁移的过程开销很大
            结论：物理上采用连续分配的文件不方便扩展
        缺点2：连续分配可能导致产生多个小块，存储空间利用率低，产生难以利用的磁盘碎片（类似内存管理中的外部碎片），可以用紧凑的方式解决，
        但是需要耗费很大的时间代价

    链接分配：采取离散分配的方式，可以将文件分配离散的磁盘块，分为隐式链接和显示链接
        隐式链接
            在文件的目录项(FCB)中需记录起始块号和结束块号，各个块中都会用一定的存储空间记录指向下一个块的指针
                文件名  ... 起始块号    结束块号
                aaa         9           16
            逻辑块号--》物理块号
            用户给出要访问的逻辑块号i，OS根据文件名找到该文件对应的目录项(FCB),找到起始块号9（逻辑上的0号块），并根据指针访问下一个逻辑块，
            因此读入i号逻辑块，总共需要i+1次磁盘IO
            缺点/结论：采用隐式链接方式的文件，只支持顺序访问，不支持随机访问，另外指向下一个块的指针也需要耗费少量的存储空间
            优点：便于扩展，如需扩展，可以随便找一个空闲块，挂到文件磁盘块链尾，并修改文件FCB，不会有碎片问题，外存利用率高
        显示链接
            把用于链接文件各物理块的指针显式地存放到一张表中，即文件分配表（FAT）
            磁盘中各个块的先后顺序统一记录在文件分配表中
                物理块号    下一块
                0           1
                1           -1（特殊值，表示文件结尾）
                2           5
                3
                4
                5           0
                ...
                22
                23
            磁盘有多少个块，在FAT中就有多少个表项
            假设新建的文件aaa依次存放在磁盘块2、5、0、1中，在aaa的目录项中需要记录文件的起始块号
                文件名   ...   起始块号
                aaa             2
            在FAT中显式的记录文件aaa这几个物理块的链接关系
            注意：一个磁盘仅设置一张FAT，开机时，将FAT读入内存，并常驻内存；FAT的各个表项在物理上连续存储，且每一个表项长度相同，
            因此物理块号字段是可以隐含的
            逻辑块号--》物理块号
            用户给出要访问的逻辑块号i，OS找到对应的目录项FCB，找到文件的起始块号，查询内存中的FAT，往后找到i号逻辑块对应的物理块号
            逻辑块号转换成物理块号的过程不需要读磁盘操作
            结论：采用显式链接方式的文件，支持顺序访问，也支持随机访问，不会产生外部碎片，便于文件扩展
            缺点：FAT表占用一定存储空间












